{"version":3,"sources":["webpack:///./src/pages/doc/custom/field.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","pageContext","frontmatter","title","parentName","isMDXComponent"],"mappings":"kRAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,sBAAKD,EAAME,YAAYC,YAAYC,OACnC,sJACA,sOACA,8JACA,uBAAK,kCAAMC,WAAW,OAAU,CAC5B,UAAa,qBADZ,iGAQL,oKACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,qBADZ,0VAiBL,yOACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,qBADZ,uaAmBL,4bACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,qBADZ,8TAiBL,wBAKJP,EAAWQ,gBAAiB","file":"component---src-pages-doc-custom-field-mdx-cc113be70b82243ecb4f.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/debabrata/Sites/Projects/Dgraph/graphql-dgraph-web/src/components/layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{props.pageContext.frontmatter.title}</h1>\n    <p>{`Custom fields allow you to extend your types with custom logic as well as make joins between your local data and remote data.`}</p>\n    <p>{`Let's say we are building an app for managing projects.  Users will login with their GitHub id and we want to connect some data about their work stored in Dgraph with say their GitHub profile, issues, etc.`}</p>\n    <p>{`Our first version of our users might start out with just their GitHub username and some data about what projects they are working on.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`type User {\n    username: String! @id \n    projects: [Project]\n    tickets: [Ticket]\n}\n`}</code></pre>\n    <p>{`We can then add their GitHub repositories by just extending the definitions with the types and custom field needed to make the remote call.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`# GitHub's repository type\ntype Respository @remote { ... }\n\n# Dgraph user type\ntype User {\n    # local user name = GitHub id\n    username: String! @id \n\n    # join local data with remote\n    repositories: [Repository] @custom(http: {\n        url:  \"https://api.github.com/users/$username/repos\",\n        method: GET\n    })\n}\n`}</code></pre>\n    <p>{`We could similarly join with say the GitHub user details, or open pull requests, to further fill out the join between GitHub and our local data.  Instead of the REST API, let's use the GitHub GraphQL endpoint`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`# GitHub's User type\ntype GitHubUser @remote { ... }\n\n# Dgraph user type\ntype User {\n    # local user name = GitHub id\n    username: String! @id \n\n    # join local data with remote\n    gitDetails: User @custom(http: {\n        url:  \"https://api.github.com/graphql\",\n        method: POST,\n        graphql: \"query(username: String!) { user(login: $username) }\",\n        skipIntrospection: true\n    })\n}\n`}</code></pre>\n    <p>{`Perhaps our app has some measure of their volocity that's calculated by a custom function that looks at both their GitHub commits and some other places where work is added.  Soon we'll have a schema where we can render a user's home page, the projects they work on, their open tickets, their GitHub details, etc. in a single request that queries across multiple sources and can mix Dgraph filtering with external calls.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`query {\n    getUser(id: \"aUser\") {\n        username\n        projects(order: { asc: lastUpdate }, first: 10) {\n            projectName\n        }\n        tickets { \n            connectedGitIssue { ... }\n        }\n        velocityMeasure\n        gitDetails { ... }\n        repositories { ... }\n    }\n}\n`}</code></pre>\n    <hr></hr>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}
{"version":3,"sources":["webpack:///./src/pages/doc/custom/index.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","pageContext","frontmatter","title","parentName","isMDXComponent"],"mappings":"gRAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,sBAAKD,EAAME,YAAYC,YAAYC,OACnC,2QACA,sHACA,kUACA,6BAAY,0BAAYC,WAAW,MAAvB,WAAZ,cACA,+DAA8C,0BAAYA,WAAW,KAAvB,WAA9C,gEACA,wEACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,qBADZ,4EAML,6EACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,qBADZ,iFAML,mEACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,qBADZ,kFAQL,oCACA,iDAAgC,0BAAYA,WAAW,KAAvB,WAAhC,cAAkG,+BAAGA,WAAW,KAAQ,CACpH,KAAQ,0BADsF,QAAlG,mBAGA,sBACE,kBAAIA,WAAW,MAAK,+BAAGA,WAAW,MAAS,CACvC,KAAQ,sBADQ,0BAGpB,kBAAIA,WAAW,MAAK,+BAAGA,WAAW,MAAS,CACvC,KAAQ,yBADQ,4BAApB,QAGA,kBAAIA,WAAW,MAAK,+BAAGA,WAAW,MAAS,CACvC,KAAQ,sBADQ,2BAItB,wBAKJP,EAAWQ,gBAAiB","file":"component---src-pages-doc-custom-index-mdx-00163ab07848a8a7e2e3.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/debabrata/Sites/Projects/Dgraph/graphql-dgraph-web/src/components/layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{props.pageContext.frontmatter.title}</h1>\n    <p>{`Dgraph creates a GraphQL API from nothing more than GraphQL types.  That's great, and gets you moving fast from an idea to a running app.  However, at some point, as your app develops, you might want to customize the behaviour of your schema.`}</p>\n    <p>{`In Dgraph, you do that with code (in any language you like) that implements custom resolvers.`}</p>\n    <p>{`Dgraph doesn't execute your custom logic itself.  It makes external HTTP requests.  That means, you can deploy your custom logic into the same Kubernetes cluster as your Dgraph instance, deploy and call, for example, AWS Lambda functions, or even make calls to existing HTTP and GraphQL endpoints.`}</p>\n    <h2>{`The `}<inlineCode parentName=\"h2\">{`@custom`}</inlineCode>{` directive`}</h2>\n    <p>{`There are three places you can use the `}<inlineCode parentName=\"p\">{`@custom`}</inlineCode>{` directive and thus tell Dgraph where to apply custom logic.`}</p>\n    <p>{`1) You can add custom queries to the Query type`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`type Query {\n    myCustomQuery(...): QueryResultType @custom(...)\n}\n`}</code></pre>\n    <p>{`2) You can add custom mutations to the Mutation type`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`type Mutation {\n    myCustomMutation(...): MutationResult @custom(...)\n}\n`}</code></pre>\n    <p>{`3) You can add custom fields to your types`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`type MyType {\n    ...\n    customField: FieldType @custom(...)\n    ...\n}\n`}</code></pre>\n    <h2>{`Learn more`}</h2>\n    <p>{`Find out more about the  `}<inlineCode parentName=\"p\">{`@custom`}</inlineCode>{` directive `}<a parentName=\"p\" {...{\n        \"href\": \"/doc/custom/directive\"\n      }}>{`here`}</a>{`, or check out:`}</p>\n    <ul>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/doc/custom/query\"\n        }}>{`custom query examples`}</a></li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/doc/custom/mutation\"\n        }}>{`custom mutation examples`}</a>{`, or`}</li>\n      <li parentName=\"ul\"><a parentName=\"li\" {...{\n          \"href\": \"/doc/custom/field\"\n        }}>{`custom field examples`}</a></li>\n    </ul>\n    <hr></hr>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}
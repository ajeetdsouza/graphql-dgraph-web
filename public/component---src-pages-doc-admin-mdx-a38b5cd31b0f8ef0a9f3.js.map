{"version":3,"sources":["webpack:///./src/pages/doc/admin.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","pageContext","frontmatter","title","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-doc-admin-mdx-a38b5cd31b0f8ef0a9f3.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/debabrata/Sites/Projects/Dgraph/graphql-dgraph-web/src/components/layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{props.pageContext.frontmatter.title}</h1>\n    <p>{`The admin API and how to run Dgraph with GraphQL.`}</p>\n    <h2>{`Running`}</h2>\n    <p>{`The simplest way to start with Dgraph GraphQL is to run the all-in-one Docker image.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-sh\"\n      }}>{`docker run -it -p 8080:8080 dgraph/standalone:master\n`}</code></pre>\n    <p>{`That brings up GraphQL at `}<inlineCode parentName=\"p\">{`localhost:8080/graphql`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`localhost:8080/admin`}</inlineCode>{`, but is intended for quickstart and doesn't persist data.`}</p>\n    <h2>{`Advanced Options`}</h2>\n    <p>{`Once you've tried out Dgraph GraphQL, you'll need to move past the `}<inlineCode parentName=\"p\">{`dgraph/standalone`}</inlineCode>{` and run and deploy Dgraph instances.`}</p>\n    <p>{`Dgraph is a distributed graph database.  It can scale to huge data and shard that data across a cluster of Dgraph instances.  GraphQL is built into Dgraph in its Alpha nodes. To learn how to manage and deploy a Dgraph cluster to build an App check Dgraph's `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.dgraph.io/\"\n      }}>{`Dgraph docs`}</a>{`, and, in particular, the `}<a parentName=\"p\" {...{\n        \"href\": \"https://docs.dgraph.io/deploy/\"\n      }}>{`deployment guide`}</a>{`.`}</p>\n    <p>{`GraphQL schema introspection is enabled by default, but can be disabled with the `}<inlineCode parentName=\"p\">{`--graphql_introspection=false`}</inlineCode>{` when starting the Dgraph alpha nodes.`}</p>\n    <h2>{`Dgraph's schema`}</h2>\n    <p>{`Dgraph's GraphQL runs in Dgraph and presents a GraphQL schema where the queries and mutations are executed in the Dgraph cluster.  So the GraphQL schema is backed by Dgraph's schema.`}</p>\n    <p><strong parentName=\"p\">{`Warning: this means if you have a Dgraph instance and change its GraphQL schema, the schema of the underlying Dgraph will also be changed!`}</strong></p>\n    <h1>{`/admin`}</h1>\n    <p>{`When you start Dgraph with GraphQL, two GraphQL endpoints are served.`}</p>\n    <p>{`At `}<inlineCode parentName=\"p\">{`/graphql`}</inlineCode>{` you'll find the GraphQL API for the types you've added.  That's what your app would access and is the GraphQL entry point to Dgraph.  If you need to know more about this, see the quick start, example and schema docs.`}</p>\n    <p>{`At `}<inlineCode parentName=\"p\">{`/admin`}</inlineCode>{` you'll find an admin API for administering your GraphQL instance.  The admin API is a GraphQL API that serves POST and GET as well as compressed data, much like the `}<inlineCode parentName=\"p\">{`/graphql`}</inlineCode>{` endpoint.`}</p>\n    <p>{`Here are the important types, queries, and mutations from the admin schema.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`type GQLSchema {\n    id: ID!\n    schema: String! \n    generatedSchema: String!\n}\n\ntype UpdateGQLSchemaPayload {\n    gqlSchema: GQLSchema\n}\n\ninput UpdateGQLSchemaInput {\n    set: GQLSchemaPatch!\n}\n\ninput GQLSchemaPatch {\n    schema: String!\n}\n\ntype Query {\n    getGQLSchema: GQLSchema\n    health: Health\n}\n\ntype Mutation {\n    updateGQLSchema(input: UpdateGQLSchemaInput!) : UpdateGQLSchemaPayload\n}\n`}</code></pre>\n    <p>{`You'll notice that the /admin schema is very much the same as the schemas generated by Dgraph GraphQL.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`health`}</inlineCode>{` query lets you know if everything is connected and if there's a schema currently being served at `}<inlineCode parentName=\"li\">{`/graphql`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`getGQLSchema`}</inlineCode>{` query gets the current GraphQL schema served at `}<inlineCode parentName=\"li\">{`/graphql`}</inlineCode>{`, or returns null if there's no such schema.`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`updateGQLSchema`}</inlineCode>{` mutation allows you to change the schema currently served at `}<inlineCode parentName=\"li\">{`/graphql`}</inlineCode>{`.`}</li>\n    </ul>\n    <h2>{`First Start`}</h2>\n    <p>{`On first starting with a blank database:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`There's no schema served at `}<inlineCode parentName=\"li\">{`/graphql`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`Querying the `}<inlineCode parentName=\"li\">{`/admin`}</inlineCode>{` endpoint for `}<inlineCode parentName=\"li\">{`getGQLSchema`}</inlineCode>{` returns `}<inlineCode parentName=\"li\">{`\"getGQLSchema\": null`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`Querying the `}<inlineCode parentName=\"li\">{`/admin`}</inlineCode>{` endpoint for `}<inlineCode parentName=\"li\">{`health`}</inlineCode>{` lets you know that no schema has been added.`}</li>\n    </ul>\n    <h2>{`Adding Schema`}</h2>\n    <p>{`Given a blank database, running the `}<inlineCode parentName=\"p\">{`/admin`}</inlineCode>{` mutation:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`mutation {\n  updateGQLSchema(\n    input: { set: { schema: \"type Person { name: String }\"}})\n  {\n    gqlSchema {\n      schema\n      generatedSchema\n    }\n  }\n}\n`}</code></pre>\n    <p>{`would cause the following.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`/graphql`}</inlineCode>{` endpoint would refresh and now serves the GraphQL schema generated from type `}<inlineCode parentName=\"li\">{`type Person { name: String }`}</inlineCode>{`: that's Dgraph type `}<inlineCode parentName=\"li\">{`Person`}</inlineCode>{` and predicate `}<inlineCode parentName=\"li\">{`Person.name: string .`}</inlineCode>{`; see `}<a parentName=\"li\" {...{\n          \"href\": \"/dgraph\"\n        }}>{`here`}</a>{` for how to customize the generated schema.`}</li>\n      <li parentName=\"ul\">{`The schema of the underlying Dgraph instance would be altered to allow for the new `}<inlineCode parentName=\"li\">{`Person`}</inlineCode>{` type and `}<inlineCode parentName=\"li\">{`name`}</inlineCode>{` predicate.`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`/admin`}</inlineCode>{` endpoint for `}<inlineCode parentName=\"li\">{`health`}</inlineCode>{` would return that a schema is being served.`}</li>\n      <li parentName=\"ul\">{`The mutation returns `}<inlineCode parentName=\"li\">{`\"schema\": \"type Person { name: String }\"`}</inlineCode>{` and the generated GraphQL schema for `}<inlineCode parentName=\"li\">{`generatedSchema`}</inlineCode>{` (this is the schema served at `}<inlineCode parentName=\"li\">{`/graphql`}</inlineCode>{`).`}</li>\n      <li parentName=\"ul\">{`Querying the `}<inlineCode parentName=\"li\">{`/admin`}</inlineCode>{` endpoint for `}<inlineCode parentName=\"li\">{`getGQLSchema`}</inlineCode>{` would return the new schema.`}</li>\n    </ul>\n    <h2>{`Migrating Schema`}</h2>\n    <p>{`Given an instance serving the schema from the previous section, running an `}<inlineCode parentName=\"p\">{`updateGQLSchema`}</inlineCode>{` mutation with the following input`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`type Person {\n    name: String @search(by: [regexp])\n    dob: DateTime\n}\n`}</code></pre>\n    <p>{`changes the GraphQL definition of `}<inlineCode parentName=\"p\">{`Person`}</inlineCode>{` and results in the following.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`/graphql`}</inlineCode>{` endpoint would refresh and now serves the GraphQL schema generated from the new type.`}</li>\n      <li parentName=\"ul\">{`The schema of the underlying Dgraph instance would be altered to allow for `}<inlineCode parentName=\"li\">{`dob`}</inlineCode>{` (predicate `}<inlineCode parentName=\"li\">{`Person.dob: datetime .`}</inlineCode>{` is added, and `}<inlineCode parentName=\"li\">{`Person.name`}</inlineCode>{` becomes `}<inlineCode parentName=\"li\">{`Person.name: string @index(regexp).`}</inlineCode>{`) and indexes are rebuilt to allow the regexp search.`}</li>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`health`}</inlineCode>{` is unchanged.`}</li>\n      <li parentName=\"ul\">{`Querying the `}<inlineCode parentName=\"li\">{`/admin`}</inlineCode>{` endpoint for `}<inlineCode parentName=\"li\">{`getGQLSchema`}</inlineCode>{` now returns the updated schema.`}</li>\n    </ul>\n    <h2>{`Removing from Schema`}</h2>\n    <p>{`Adding a schema through GraphQL doesn't remove existing data (it would remove indexes).  For example, starting from the schema in the previous section and running `}<inlineCode parentName=\"p\">{`updateGQLSchema`}</inlineCode>{` with the initial `}<inlineCode parentName=\"p\">{`type Person { name: String }`}</inlineCode>{` would have the following effects.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`The `}<inlineCode parentName=\"li\">{`/graphql`}</inlineCode>{` endpoint would refresh to serve the schema built from this type.`}</li>\n      <li parentName=\"ul\">{`Thus field `}<inlineCode parentName=\"li\">{`dob`}</inlineCode>{` would no longer be accessible and there'd be no search available on `}<inlineCode parentName=\"li\">{`name`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`The search index on `}<inlineCode parentName=\"li\">{`name`}</inlineCode>{` in Dgraph would be removed.`}</li>\n      <li parentName=\"ul\">{`The predicate `}<inlineCode parentName=\"li\">{`dob`}</inlineCode>{` in Dgraph is left untouched - the predicate remains and no data is deleted.`}</li>\n    </ul>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}
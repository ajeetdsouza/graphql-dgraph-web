(window.webpackJsonp=window.webpackJsonp||[]).push([[6],{aXa1:function(e,n,a){"use strict";a.r(n),a.d(n,"_frontmatter",(function(){return l})),a.d(n,"default",(function(){return b}));var t=a("zLVn"),i=(a("q1tI"),a("7ljp")),r=a("Bl7J"),l={},h={_frontmatter:l},p=r.a;function b(e){var n=e.components,a=Object(t.a)(e,["components"]);return Object(i.b)(p,Object.assign({},h,a,{components:n,mdxType:"MDXLayout"}),Object(i.b)("h1",null,a.pageContext.frontmatter.title),Object(i.b)("p",null,"The admin API and how to run Dgraph with GraphQL."),Object(i.b)("h2",null,"Running"),Object(i.b)("p",null,"The simplest way to start with Dgraph GraphQL is to run the all-in-one Docker image."),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-sh"}),"docker run -it -p 8080:8080 dgraph/standalone:v20.03.1\n")),Object(i.b)("p",null,"That brings up GraphQL at ",Object(i.b)("inlineCode",{parentName:"p"},"localhost:8080/graphql")," and ",Object(i.b)("inlineCode",{parentName:"p"},"localhost:8080/admin"),", but is intended for quickstart and doesn't persist data."),Object(i.b)("h2",null,"Advanced Options"),Object(i.b)("p",null,"Once you've tried out Dgraph GraphQL, you'll need to move past the ",Object(i.b)("inlineCode",{parentName:"p"},"dgraph/standalone")," and run and deploy Dgraph instances."),Object(i.b)("p",null,"Dgraph is a distributed graph database.  It can scale to huge data and shard that data across a cluster of Dgraph instances.  GraphQL is built into Dgraph in its Alpha nodes. To learn how to manage and deploy a Dgraph cluster to build an App check Dgraph's ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"https://docs.dgraph.io/"}),"Dgraph docs"),", and, in particular, the ",Object(i.b)("a",Object.assign({parentName:"p"},{href:"https://docs.dgraph.io/deploy/"}),"deployment guide"),"."),Object(i.b)("p",null,"GraphQL schema introspection is enabled by default, but can be disabled with the ",Object(i.b)("inlineCode",{parentName:"p"},"--graphql_introspection=false")," when starting the Dgraph alpha nodes."),Object(i.b)("h2",null,"Dgraph's schema"),Object(i.b)("p",null,"Dgraph's GraphQL runs in Dgraph and presents a GraphQL schema where the queries and mutations are executed in the Dgraph cluster.  So the GraphQL schema is backed by Dgraph's schema."),Object(i.b)("p",null,Object(i.b)("strong",{parentName:"p"},"Warning: this means if you have a Dgraph instance and change its GraphQL schema, the schema of the underlying Dgraph will also be changed!")),Object(i.b)("h1",null,"/admin"),Object(i.b)("p",null,"When you start Dgraph with GraphQL, two GraphQL endpoints are served."),Object(i.b)("p",null,"At ",Object(i.b)("inlineCode",{parentName:"p"},"/graphql")," you'll find the GraphQL API for the types you've added.  That's what your app would access and is the GraphQL entry point to Dgraph.  If you need to know more about this, see the quick start, example and schema docs."),Object(i.b)("p",null,"At ",Object(i.b)("inlineCode",{parentName:"p"},"/admin")," you'll find an admin API for administering your GraphQL instance.  The admin API is a GraphQL API that serves POST and GET as well as compressed data, much like the ",Object(i.b)("inlineCode",{parentName:"p"},"/graphql")," endpoint."),Object(i.b)("p",null,"Here are the important types, queries, and mutations from the admin schema."),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-graphql"}),"type GQLSchema {\n    id: ID!\n    schema: String! \n    generatedSchema: String!\n}\n\ntype UpdateGQLSchemaPayload {\n    gqlSchema: GQLSchema\n}\n\ninput UpdateGQLSchemaInput {\n    set: GQLSchemaPatch!\n}\n\ninput GQLSchemaPatch {\n    schema: String!\n}\n\ntype Query {\n    getGQLSchema: GQLSchema\n    health: Health\n}\n\ntype Mutation {\n    updateGQLSchema(input: UpdateGQLSchemaInput!) : UpdateGQLSchemaPayload\n}\n")),Object(i.b)("p",null,"You'll notice that the /admin schema is very much the same as the schemas generated by Dgraph GraphQL."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The ",Object(i.b)("inlineCode",{parentName:"li"},"health")," query lets you know if everything is connected and if there's a schema currently being served at ",Object(i.b)("inlineCode",{parentName:"li"},"/graphql"),"."),Object(i.b)("li",{parentName:"ul"},"The ",Object(i.b)("inlineCode",{parentName:"li"},"getGQLSchema")," query gets the current GraphQL schema served at ",Object(i.b)("inlineCode",{parentName:"li"},"/graphql"),", or returns null if there's no such schema."),Object(i.b)("li",{parentName:"ul"},"The ",Object(i.b)("inlineCode",{parentName:"li"},"updateGQLSchema")," mutation allows you to change the schema currently served at ",Object(i.b)("inlineCode",{parentName:"li"},"/graphql"),".")),Object(i.b)("h2",null,"First Start"),Object(i.b)("p",null,"On first starting with a blank database:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"There's no schema served at ",Object(i.b)("inlineCode",{parentName:"li"},"/graphql"),"."),Object(i.b)("li",{parentName:"ul"},"Querying the ",Object(i.b)("inlineCode",{parentName:"li"},"/admin")," endpoint for ",Object(i.b)("inlineCode",{parentName:"li"},"getGQLSchema")," returns ",Object(i.b)("inlineCode",{parentName:"li"},'"getGQLSchema": null'),"."),Object(i.b)("li",{parentName:"ul"},"Querying the ",Object(i.b)("inlineCode",{parentName:"li"},"/admin")," endpoint for ",Object(i.b)("inlineCode",{parentName:"li"},"health")," lets you know that no schema has been added.")),Object(i.b)("h2",null,"Adding Schema"),Object(i.b)("p",null,"Given a blank database, running the ",Object(i.b)("inlineCode",{parentName:"p"},"/admin")," mutation:"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-graphql"}),'mutation {\n  updateGQLSchema(\n    input: { set: { schema: "type Person { name: String }"}})\n  {\n    gqlSchema {\n      schema\n      generatedSchema\n    }\n  }\n}\n')),Object(i.b)("p",null,"would cause the following."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The ",Object(i.b)("inlineCode",{parentName:"li"},"/graphql")," endpoint would refresh and now serves the GraphQL schema generated from type ",Object(i.b)("inlineCode",{parentName:"li"},"type Person { name: String }"),": that's Dgraph type ",Object(i.b)("inlineCode",{parentName:"li"},"Person")," and predicate ",Object(i.b)("inlineCode",{parentName:"li"},"Person.name: string ."),"; see ",Object(i.b)("a",Object.assign({parentName:"li"},{href:"/dgraph"}),"here")," for how to customize the generated schema."),Object(i.b)("li",{parentName:"ul"},"The schema of the underlying Dgraph instance would be altered to allow for the new ",Object(i.b)("inlineCode",{parentName:"li"},"Person")," type and ",Object(i.b)("inlineCode",{parentName:"li"},"name")," predicate."),Object(i.b)("li",{parentName:"ul"},"The ",Object(i.b)("inlineCode",{parentName:"li"},"/admin")," endpoint for ",Object(i.b)("inlineCode",{parentName:"li"},"health")," would return that a schema is being served."),Object(i.b)("li",{parentName:"ul"},"The mutation returns ",Object(i.b)("inlineCode",{parentName:"li"},'"schema": "type Person { name: String }"')," and the generated GraphQL schema for ",Object(i.b)("inlineCode",{parentName:"li"},"generatedSchema")," (this is the schema served at ",Object(i.b)("inlineCode",{parentName:"li"},"/graphql"),")."),Object(i.b)("li",{parentName:"ul"},"Querying the ",Object(i.b)("inlineCode",{parentName:"li"},"/admin")," endpoint for ",Object(i.b)("inlineCode",{parentName:"li"},"getGQLSchema")," would return the new schema.")),Object(i.b)("h2",null,"Migrating Schema"),Object(i.b)("p",null,"Given an instance serving the schema from the previous section, running an ",Object(i.b)("inlineCode",{parentName:"p"},"updateGQLSchema")," mutation with the following input"),Object(i.b)("pre",null,Object(i.b)("code",Object.assign({parentName:"pre"},{className:"language-graphql"}),"type Person {\n    name: String @search(by: [regexp])\n    dob: DateTime\n}\n")),Object(i.b)("p",null,"changes the GraphQL definition of ",Object(i.b)("inlineCode",{parentName:"p"},"Person")," and results in the following."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The ",Object(i.b)("inlineCode",{parentName:"li"},"/graphql")," endpoint would refresh and now serves the GraphQL schema generated from the new type."),Object(i.b)("li",{parentName:"ul"},"The schema of the underlying Dgraph instance would be altered to allow for ",Object(i.b)("inlineCode",{parentName:"li"},"dob")," (predicate ",Object(i.b)("inlineCode",{parentName:"li"},"Person.dob: datetime .")," is added, and ",Object(i.b)("inlineCode",{parentName:"li"},"Person.name")," becomes ",Object(i.b)("inlineCode",{parentName:"li"},"Person.name: string @index(regexp)."),") and indexes are rebuilt to allow the regexp search."),Object(i.b)("li",{parentName:"ul"},"The ",Object(i.b)("inlineCode",{parentName:"li"},"health")," is unchanged."),Object(i.b)("li",{parentName:"ul"},"Querying the ",Object(i.b)("inlineCode",{parentName:"li"},"/admin")," endpoint for ",Object(i.b)("inlineCode",{parentName:"li"},"getGQLSchema")," now returns the updated schema.")),Object(i.b)("h2",null,"Removing from Schema"),Object(i.b)("p",null,"Adding a schema through GraphQL doesn't remove existing data (it would remove indexes).  For example, starting from the schema in the previous section and running ",Object(i.b)("inlineCode",{parentName:"p"},"updateGQLSchema")," with the initial ",Object(i.b)("inlineCode",{parentName:"p"},"type Person { name: String }")," would have the following effects."),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"The ",Object(i.b)("inlineCode",{parentName:"li"},"/graphql")," endpoint would refresh to serve the schema built from this type."),Object(i.b)("li",{parentName:"ul"},"Thus field ",Object(i.b)("inlineCode",{parentName:"li"},"dob")," would no longer be accessible and there'd be no search available on ",Object(i.b)("inlineCode",{parentName:"li"},"name"),"."),Object(i.b)("li",{parentName:"ul"},"The search index on ",Object(i.b)("inlineCode",{parentName:"li"},"name")," in Dgraph would be removed."),Object(i.b)("li",{parentName:"ul"},"The predicate ",Object(i.b)("inlineCode",{parentName:"li"},"dob")," in Dgraph is left untouched - the predicate remains and no data is deleted.")))}b.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-admin-mdx-aa9639fa355d24b4afce.js.map
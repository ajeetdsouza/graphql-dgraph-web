{"version":3,"sources":["webpack:///./src/pages/doc/custom/directive.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","pageContext","frontmatter","title","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-doc-custom-directive-mdx-2bb1721ebdeac6d7c5ee.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/debabrata/Sites/Projects/Dgraph/graphql-dgraph-web/src/components/layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{props.pageContext.frontmatter.title}</h1>\n    <p>{`The `}<inlineCode parentName=\"p\">{`@custom`}</inlineCode>{` directive is used to define custom queries, mutations and fields.`}</p>\n    <p>{`In all cases, the result type (of the query, mutation or field) can be either:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`a type that's stored in Dgraph (that's any type you've defined in your schema), or`}</li>\n      <li parentName=\"ul\">{`a type that's not stored in Dgraph and is marked with the `}<inlineCode parentName=\"li\">{`@remote`}</inlineCode>{` directive.`}</li>\n    </ul>\n    <p>{`Because the result types can be local or remote, you can call other HTTP endpoints, call remote GraphQL, or even call back to your Dgraph instance to add extra logic on top of Dgraph's graph search or mutations.`}</p>\n    <p>{`Here's the GraphQL definition of the directives:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`directive @custom(http: CustomHTTP) on FIELD_DEFINITION\ndirective @remote on OBJECT | INTERFACE\n\ninput CustomHTTP {\n    url:            String!\n    method:         HTTPMethod!\n    forwardHeaders: [String!]\n    mode:           Mode\n    body:           String\n    graphql:        String\n    skipIntrospection: Boolean\n}\n\nenum HTTPMethod { GET POST PUT PATCH DELETE }\nenum Mode { SINGLE BATCH }\n`}</code></pre>\n    <p>{`Each definition of custom logic must include:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`the `}<inlineCode parentName=\"li\">{`url`}</inlineCode>{` where the custom logic is called.  This can include a path and parameters that depend on query/mutation arguments or other fields.`}</li>\n      <li parentName=\"ul\">{`the HTTP `}<inlineCode parentName=\"li\">{`method`}</inlineCode>{` to use in the call.  For example, when calling a REST endpoint with `}<inlineCode parentName=\"li\">{`GET`}</inlineCode>{`, `}<inlineCode parentName=\"li\">{`POST`}</inlineCode>{`, etc.`}</li>\n    </ul>\n    <p>{`Optionally, the custom logic definition can also include:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`a list of `}<inlineCode parentName=\"li\">{`forwardHeaders`}</inlineCode>{` to take from the incoming request and add to the outgoing HTTP call.  Used, for example, if the incoming request contains an auth token that must be passed to the custom logic.`}</li>\n      <li parentName=\"ul\">{`a `}<inlineCode parentName=\"li\">{`body`}</inlineCode>{` definition that can be used to construct a HTTP body from from arguments or fields.`}</li>\n      <li parentName=\"ul\">{`the `}<inlineCode parentName=\"li\">{`graphql`}</inlineCode>{` query/mutation to call if the custom logic is a GraphQL server and whether to introspect or not (`}<inlineCode parentName=\"li\">{`skipIntrospection`}</inlineCode>{`) the remote GraphQL endpoint.`}</li>\n    </ul>\n    <p>{`The result type of custom queries and mutations can be any object type in your schema, including `}<inlineCode parentName=\"p\">{`@remote`}</inlineCode>{` types.  For custom fields the type can be object types or scalar types.`}</p>\n    <p>{`The `}<inlineCode parentName=\"p\">{`method`}</inlineCode>{` can be any of the HTTP methods: `}<inlineCode parentName=\"p\">{`GET`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`POST`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`PUT`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`PATCH`}</inlineCode>{`, or `}<inlineCode parentName=\"p\">{`DELETE`}</inlineCode>{`, and `}<inlineCode parentName=\"p\">{`forwardHeaders`}</inlineCode>{` is a list of headers that should be passed from the incoming request to the outgoing HTTP custom request.  Let's look at each of the other `}<inlineCode parentName=\"p\">{`http`}</inlineCode>{` arguments in detail.`}</p>\n    <h2>{`The URL and method`}</h2>\n    <p>{`The URL can be as simple as a fixed URL string, or include details drawn from the arguments or fields.`}</p>\n    <p>{`A simple string might look like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`type Query {\n    myCustomQuery: MyResult @custom(http: {\n        url: \"https://my.api.com/theQuery\",\n        method: GET\n    })\n}\n`}</code></pre>\n    <p>{`While, in more complex cases, the arguments of the query/mutation can be used as a pattern for the URL:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`type Query {\n    myGetPerson(id: ID!): Person @custom(http: {\n        url: \"https://my.api.com/person/$id\",\n        method: GET\n    })\n\n    getPosts(authorID: ID!, numToFetch: Int!): [Post] @custom(http: {\n        url: \"https://my.api.com/person/$authorID/posts?limit=$numToFetch\",\n        method: GET\n    })\n}\n`}</code></pre>\n    <p>{`In this case, a query like`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`query {\n    getPosts(authorID: \"auth123\", numToFetch: 10) { \n        title \n    }\n}\n`}</code></pre>\n    <p>{`gets transformed to an outgoing HTTP GET request to the URL `}<inlineCode parentName=\"p\">{`https://my.api.com/person/auth123/posts?limit=10`}</inlineCode>{`.`}</p>\n    <p>{`When using custom logic on fields, the URL can draw from other fields in the type.  For example:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`type User {\n    username: String! @id\n    ...\n    posts: [Post] @custom(http: {\n        url: \"https://my.api.com/person/$username/posts\",\n        method: GET\n    })\n}\n`}</code></pre>\n    <p>{`Note that:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Fields or arguments used in the path of a URL, such as `}<inlineCode parentName=\"li\">{`username`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`authorID`}</inlineCode>{` in the exapmles above, must be marked as non-nullable (have `}<inlineCode parentName=\"li\">{`!`}</inlineCode>{` in their type); whereas, those used in parameters, such as `}<inlineCode parentName=\"li\">{`numToFetch`}</inlineCode>{`, can be nullable.`}</li>\n      <li parentName=\"ul\">{`Currently, only scalar fields or arguments are allowed to be used in URLs or bodies; though, see body below, this doesn't restrict the objects you can construct and pass to custom logic functions.`}</li>\n    </ul>\n    <h2>{`The body`}</h2>\n    <p>{`Many HTTP requests, such as add and update operations on REST APIs, require a JSON formatted body to supply the data.  In a similar way to how `}<inlineCode parentName=\"p\">{`url`}</inlineCode>{` allows specifying a url pattern to use in resolving the custom request, Dgraph allows a `}<inlineCode parentName=\"p\">{`body`}</inlineCode>{` pattern that is used to build HTTP request bodies.`}</p>\n    <p>{`For example, this body can be structured JSON that relates a mutation's arguments to the JSON structure required by the remote endpoint.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`type Mutation {\n    newMovie(title: String!, desc: String, dir: ID, imdb: ID): Movie @custom(http: {\n            url: \"http://myapi.com/movies\",\n            method: \"POST\",\n            body: \"{ title: $title, imdbID: $imdb, storyLine: $desc, director: { id: $dir }}\",\n    })\n`}</code></pre>\n    <p>{`A request with `}<inlineCode parentName=\"p\">{`newMovie(title: \"...\", desc: \"...\", dir: \"dir123\", imdb: \"tt0120316\")`}</inlineCode>{` is transformed into a `}<inlineCode parentName=\"p\">{`POST`}</inlineCode>{` request to `}<inlineCode parentName=\"p\">{`http://myapi.com/movies`}</inlineCode>{` with a JSON body of:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n    \"title\": \"...\",\n    \"imdbID\": \"tt0120316\",\n    \"storyLine\": \"...\",\n    \"director\": {\n        \"id\": \"dir123\"\n    }\n}\n`}</code></pre>\n    <p><inlineCode parentName=\"p\">{`url`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`body`}</inlineCode>{` templates can be used together in a single custom definition.`}</p>\n    <p>{`For both `}<inlineCode parentName=\"p\">{`url`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`body`}</inlineCode>{` templates, any non-null arguments or fields must be present to evaluate the custom logic.  And the following rules are applied when building the request from the template for nullable arguments or fields.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`If the value of a nullable argument is present, it's used in the template.`}</li>\n      <li parentName=\"ul\">{`If a nullable argument is present, but null, then in a body `}<inlineCode parentName=\"li\">{`null`}</inlineCode>{` is inserted, while in a url nothing is added.  For example, if the `}<inlineCode parentName=\"li\">{`desc`}</inlineCode>{` argument above is null then `}<inlineCode parentName=\"li\">{`{ ..., storyLine: null, ...}`}</inlineCode>{` is constructed for the body.  Whereas, in a URL pattern like `}<inlineCode parentName=\"li\">{`https://a.b.c/endpoint?arg=$gqlArg`}</inlineCode>{`, if `}<inlineCode parentName=\"li\">{`gqlArg`}</inlineCode>{` is present, but null, the generated URL is `}<inlineCode parentName=\"li\">{`https://a.b.c/endpoint?arg=`}</inlineCode>{`.`}</li>\n      <li parentName=\"ul\">{`If a nullable argument is not present, nothing is added to the URL/body.  That would mean the constructed body would not contain `}<inlineCode parentName=\"li\">{`storyLine`}</inlineCode>{` if the `}<inlineCode parentName=\"li\">{`desc`}</inlineCode>{` argument is missing, and in `}<inlineCode parentName=\"li\">{`https://a.b.c/endpoint?arg=$gqlArg`}</inlineCode>{` the result would be `}<inlineCode parentName=\"li\">{`https://a.b.c/endpoint`}</inlineCode>{` if `}<inlineCode parentName=\"li\">{`gqlArg`}</inlineCode>{` were not present in the request arguments.`}</li>\n    </ul>\n    <h2>{`Calling GraphQL custom resolvers`}</h2>\n    <p>{`Custom queries, mutations and fields can be implemented by custom GraphQL resolvers.  In this case, use the `}<inlineCode parentName=\"p\">{`graphql`}</inlineCode>{` argument to specify which query/mutation on the remote server to call.  The syntax includes if the call is a query or mutation, the arguments, and what query/mutation to use on the remote endpoint.`}</p>\n    <p>{`For example, you can pass arguments to queries onward as arguments to remote GraphQL endpoints:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`type Query {\n    getPosts(authorID: ID!, numToFetch: Int!): [Post] @custom(http: {\n        url: \"https://my.api.com/graphql\",\n        method: POST,\n        graphql: \"query($authorID: ID!, $numToFetch: Int!) { posts(auth: $authorID, first: $numToFetch) }\"\n    })\n}\n`}</code></pre>\n    <p>{`You can also define your own inputs and pass those to the remote GraphQL endpoint.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`input NewMovieInput { ... }\n\ntype Mutation {\n    newMovie(input: NewMovieInput!): Movie @custom(http: {\n        url: \"http://movies.com/graphql\",\n        method: \"POST\",\n        graphql: \"mutation($input: NewMovieInput!) { addMovie(data: $input) }\",\n    })\n`}</code></pre>\n    <p>{`When a schema is uploaded, Dgraph will try to introspect the remote GraphQL endpoints on any custom logic that uses the `}<inlineCode parentName=\"p\">{`graphql`}</inlineCode>{` argument.  From the results of introspection, it tries to match up arguments, input and object types to ensure that the calls to and expected responses from the remote GraphQL make sense.`}</p>\n    <p>{`If that introspection isn't possible, set `}<inlineCode parentName=\"p\">{`skipIntrospection: true`}</inlineCode>{` in the custom definition and Dgraph won't perform GraphQL schema introspection for this custom definition.  `}</p>\n    <h2>{`Remote types`}</h2>\n    <p>{`Any type annotated with the `}<inlineCode parentName=\"p\">{`@remote`}</inlineCode>{` directive is not stored in Dgraph.  This allows your Dgraph GraphQL instance to serve an API that includes both data stored locally and data stored or generated elsewhere.  You can also use custom fields, for example, to join data from disparate datasets.`}</p>\n    <p>{`Remote types can only be returned by custom resolvers and Dgraph won't generate any search or CRUD operations for remote types.`}</p>\n    <p>{`The schema definition used to define your Dgraph GraphQL API must include definitions of all the types used.  If a custom logic call returns a type not stored in Dgraph, then that type must be added to the Dgraph schema with the `}<inlineCode parentName=\"p\">{`@remote`}</inlineCode>{` directive.`}</p>\n    <p>{`For example, you api might use custom logic to integrate with GitHub, using either `}<inlineCode parentName=\"p\">{`https://api.github.com`}</inlineCode>{` or the GitHub GraphQL api `}<inlineCode parentName=\"p\">{`https://api.github.com/graphql`}</inlineCode>{` and calling the `}<inlineCode parentName=\"p\">{`user`}</inlineCode>{` query.  Either way, your GraphQL schema will need to include the type you expect back from that remote call.  That could be linking a `}<inlineCode parentName=\"p\">{`User`}</inlineCode>{` as stored in your Dgraph instance  with the `}<inlineCode parentName=\"p\">{`Repository`}</inlineCode>{` data from GitHub.  With `}<inlineCode parentName=\"p\">{`@remote`}</inlineCode>{` types, that's as simple as adding the type and custom call to your  schema.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`# GitHub's repository type\ntype Respository @remote { ... }\n\n# Dgraph user type\ntype User {\n    # local user name = GitHub id\n    username: String! @id \n\n    # ... \n    # other data stored in Dgraph\n    # ...\n\n    # join local data with remote\n    repositories: [Repository] @custom(http: {\n        url:  \"https://api.github.com/users/$username/repos\",\n        method: GET\n    })\n}\n`}</code></pre>\n    <p>{`Just defining the connection is all it takes and then you can ask a single GraphQL query that performs a local query and joins with (potentialy many) remote data sources.`}</p>\n    <h2>{`How Dgraph processes custom results`}</h2>\n    <p>{`Given types like`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`type Post @remote {\n    id: ID!\n    title: String!\n    datePublished: DateTime\n    author: Author\n}\n\ntype Author { ... }\n`}</code></pre>\n    <p>{`and a custom query`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`type Query {\n    getPost(id: ID!): Post @custom(http: {\n        url: \"https://my.api.com/post/$id\",\n        method: GET\n    })\n\n    getPosts(authorID: ID!, numToFetch: Int!): [Post] @custom(http: {\n        url: \"https://my.api.com/person/$authorID/posts?limit=$numToFetch\",\n        method: GET\n    })\n}\n`}</code></pre>\n    <p>{`Dgraph turns the `}<inlineCode parentName=\"p\">{`getPost`}</inlineCode>{` query into a HTTP request to `}<inlineCode parentName=\"p\">{`https://my.api.com/post/$id`}</inlineCode>{` and expects a single JSON object with fields `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`title`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`datePublished`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`author`}</inlineCode>{` as result.  Any additional fields are ignored, while if non-nullable fields (like `}<inlineCode parentName=\"p\">{`id`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`title`}</inlineCode>{`) are missing, GraphQL error propagation will be triggered.`}</p>\n    <p>{`For `}<inlineCode parentName=\"p\">{`getPosts`}</inlineCode>{`, Dgraph expects the HTTP call to `}<inlineCode parentName=\"p\">{`https://my.api.com/person/$authorID/posts?limit=$numToFetch`}</inlineCode>{` to return a JSON array of JSON objects, with each object matching the `}<inlineCode parentName=\"p\">{`Post`}</inlineCode>{` type as described above.`}</p>\n    <p>{`If the custom resolvers are GraphQL calls, like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`type Query {\n    getPost(id: ID!): Post @custom(http: {\n        url: \"https://my.api.com/graphql\",\n        method: POST,\n        graphql: \"query(id: ID) { post(postID: $id) }\"\n    })\n\n    getPosts(authorID: ID!, numToFetch: Int!): [Post] @custom(http: {\n        url: \"https://my.api.com/graphql\",\n        method: POST,\n        graphql: \"query(id: ID) { postByAuthor(authorID: $id, first: $numToFetch) }\"\n    })\n}\n`}</code></pre>\n    <p>{`then Dgraph expects a GraphQL call to `}<inlineCode parentName=\"p\">{`post`}</inlineCode>{` to return a valid GraphQL result like `}<inlineCode parentName=\"p\">{`{ \"data\": { \"post\": {...} } }`}</inlineCode>{` and will use the JSON object that is the value of `}<inlineCode parentName=\"p\">{`post`}</inlineCode>{` as the data resolved by the request.`}</p>\n    <p>{`Similarly, Dgraph expects `}<inlineCode parentName=\"p\">{`postByAuthor`}</inlineCode>{` to return data like `}<inlineCode parentName=\"p\">{`{ \"data\": { \"postByAuthor\": [ {...}, ... ] } }`}</inlineCode>{` and will use the array value of `}<inlineCode parentName=\"p\">{`postByAuthor`}</inlineCode>{` to build its array of posts result.`}</p>\n    <h2>{`How custom fields are resolved`}</h2>\n    <p>{`When evaluating a request that includes custom fields, Dgraph might run multiple resolution stages to resolve all the fields.  Dgraph must also ensure it requests enough data to forfull the custom fields.  For example, given the `}<inlineCode parentName=\"p\">{`User`}</inlineCode>{` type defined as:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`type User {\n    username: String! @id\n    ...\n    posts: [Post] @custom(http: {\n        url: \"https://my.api.com/person/$username/posts\",\n        method: GET\n    })\n}\n`}</code></pre>\n    <p>{`a query such as:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`query {\n    queryUser {\n        username\n        posts\n    }\n}\n`}</code></pre>\n    <p>{`is executed by first querying in Dgraph for `}<inlineCode parentName=\"p\">{`username`}</inlineCode>{` and then using the result to resolve the custom field `}<inlineCode parentName=\"p\">{`posts`}</inlineCode>{` (which relies on `}<inlineCode parentName=\"p\">{`username`}</inlineCode>{`).  For a request like:`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`query {\n    queryUser {\n        posts\n    }\n}\n`}</code></pre>\n    <p>{`Dgraph works out that it must first get `}<inlineCode parentName=\"p\">{`username`}</inlineCode>{` so it can run the custom field `}<inlineCode parentName=\"p\">{`posts`}</inlineCode>{`, even though `}<inlineCode parentName=\"p\">{`username`}</inlineCode>{` isn't part of the original query.  So Dgraph retrieves enough data to satisfy the custom request, even if that involves data that isn't asked for in the query.`}</p>\n    <p>{`There are currently a few limitations on custom fields: `}</p>\n    <ul>\n      <li parentName=\"ul\">{`each custom call must include either an `}<inlineCode parentName=\"li\">{`ID`}</inlineCode>{` or `}<inlineCode parentName=\"li\">{`@id`}</inlineCode>{` field`}</li>\n      <li parentName=\"ul\">{`arguments are not allowed (soon custom field arguments will be allowed and will be used in the `}<inlineCode parentName=\"li\">{`@custom`}</inlineCode>{` directive in the same manner as for custom queries and mutations), and`}</li>\n      <li parentName=\"ul\">{`a custom field can't depend on another custom field (longer term, we intend to lift this restriction).`}</li>\n    </ul>\n    <h2>{`Restrictions / Roadmap`}</h2>\n    <p>{`Our custom logic is still in beta and we are improving it quickly.  Here's a few points that we plan to work on soon:`}</p>\n    <ul>\n      <li parentName=\"ul\">{`adding arguments to custom fields`}</li>\n      <li parentName=\"ul\">{`relaxing the restrictions on custom fields using id values`}</li>\n      <li parentName=\"ul\">{`iterative evaluation of `}<inlineCode parentName=\"li\">{`@custom`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`@remote`}</inlineCode>{` - in the current version you can't have `}<inlineCode parentName=\"li\">{`@custom`}</inlineCode>{` inside an `}<inlineCode parentName=\"li\">{`@remote`}</inlineCode>{` type once we add this, you'll be able to extend remote types with custom fields, and`}</li>\n      <li parentName=\"ul\">{`allowing fine tuning of the generated API, for example removing of customizing the generated CRUD mutations.`}</li>\n    </ul>\n    <hr></hr>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}
{"version":3,"sources":["webpack:///./src/pages/tutorials/todo-app-tutorial/todo-auth-rules.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","pageContext","frontmatter","title","parentName","isMDXComponent"],"mappings":"gRAMO,IAAMA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,E,oIACF,mBACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,sBAAKD,EAAME,YAAYC,YAAYC,OACnC,wJAAuI,0BAAYC,WAAW,KAAvB,QAAvI,iDACA,mGAAkF,0BAAYA,WAAW,KAAvB,QAAlF,gDACA,qHACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,qBADZ,8dAsBL,sDACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,+EAIL,0EAAyD,0BAAYA,WAAW,KAAvB,QAAzD,mEAA6K,0BAAYA,WAAW,KAAvB,SAA7K,sCAAqQ,0BAAYA,WAAW,KAAvB,OAArQ,KAA0T,0BAAYA,WAAW,KAAvB,UAA1T,YACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,qBADZ,6HAUL,sDAAqC,0BAAYA,WAAW,KAAvB,QAArC,gEAAsJ,0BAAYA,WAAW,KAAvB,aAAtJ,wBAAoO,0BAAYA,WAAW,KAAvB,QAApO,sBAA2S,0BAAYA,WAAW,KAAvB,QAA3S,qCAAiY,0BAAYA,WAAW,KAAvB,QAAjY,uBAAyc,0BAAYA,WAAW,KAAvB,YAAzc,yBAAuhB,0BAAYA,WAAW,KAAvB,QAAvhB,+CACA,yGAAwF,0BAAYA,WAAW,KAAvB,QAAxF,gPACA,kGAKJP,EAAWQ,gBAAiB","file":"component---src-pages-tutorials-todo-app-tutorial-todo-auth-rules-mdx-98685240f09ccf3d6388.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/debabrata/Sites/Projects/Dgraph/graphql-dgraph-web/src/components/layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{props.pageContext.frontmatter.title}</h1>\n    <p>{`In the current state of the app, we can view anyone's todos, but we want our todos to be private to us. Let's do that using the `}<inlineCode parentName=\"p\">{`auth`}</inlineCode>{` directive to limit that to the user's todos.`}</p>\n    <p>{`We want to limit the user to its own todos, so we will define the query in `}<inlineCode parentName=\"p\">{`auth`}</inlineCode>{` to filter depending on the user's username.`}</p>\n    <p>{`Let's update the schema to include that, and then let's understand what is happening there -`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{`type Task @auth(\n    query: { rule: \"\"\"\n        query($USER: String!) {\n            queryTask {\n                user(filter: { username: { eq: $USER } }) {\n                    __typename\n                }\n            }\n        }\"\"\"}){\n    id: ID!\n    title: String! @search(by: [fulltext])\n    completed: Boolean! @search\n    user: User!\n}\ntype User {\n  username: String! @id @search(by: [hash])\n  name: String\n  tasks: [Task] @hasInverse(field: user)\n}\n`}</code></pre>\n    <p>{`Resubmit the updated schema -`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`curl -X POST localhost:8080/admin/schema --data-binary '@schema.graphql'\n`}</code></pre>\n    <p>{`Now let's see what does the definition inside the `}<inlineCode parentName=\"p\">{`auth`}</inlineCode>{` directive means. Firstly, we can see that this rule applies to `}<inlineCode parentName=\"p\">{`query`}</inlineCode>{` (similarly we can define rules on `}<inlineCode parentName=\"p\">{`add`}</inlineCode>{`, `}<inlineCode parentName=\"p\">{`update`}</inlineCode>{` etc.). `}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-graphql\"\n      }}>{` query ($USER: String!) {\n  queryTask {\n    user(filter: {username: {eq: $USER}}) {\n      __typename\n    }\n  }\n}\n`}</code></pre>\n    <p>{`The rule contains a parameter `}<inlineCode parentName=\"p\">{`USER`}</inlineCode>{` which we will use to filter the todos by a user. As we know `}<inlineCode parentName=\"p\">{`queryTask`}</inlineCode>{` returns an array of `}<inlineCode parentName=\"p\">{`task`}</inlineCode>{` that contains the `}<inlineCode parentName=\"p\">{`user`}</inlineCode>{` also and we want to filter it by `}<inlineCode parentName=\"p\">{`user`}</inlineCode>{`, so we compare the `}<inlineCode parentName=\"p\">{`username`}</inlineCode>{` of the user with the `}<inlineCode parentName=\"p\">{`USER`}</inlineCode>{` passed to the auth rule (logged in user). `}</p>\n    <p>{`Now the next thing you would be wondering is that how do we pass a value for the `}<inlineCode parentName=\"p\">{`USER`}</inlineCode>{` parameter in the auth rule since its not something that you can call, the answer is pretty simple actually that value will be extracted from the JWT token which we pass to our GraphQL API as a header and then it will execute the rule. `}</p>\n    <p>{`Let's see how we can do that in the next step using Auth0 as an example.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}
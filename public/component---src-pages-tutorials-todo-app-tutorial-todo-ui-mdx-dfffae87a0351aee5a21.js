(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{r06I:function(e,t,n){"use strict";n.r(t),n.d(t,"_frontmatter",(function(){return o})),n.d(t,"default",(function(){return l}));n("rzGZ"),n("Dq+y"),n("8npG"),n("Ggvi"),n("E5k/"),n("q1tI");var a=n("7ljp"),r=n("Bl7J");var o={},s={_frontmatter:o},p=r.a;function l(e){var t=e.components,n=function(e,t){if(null==e)return{};var n,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)n=o[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,["components"]);return Object(a.b)(p,Object.assign({},s,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("h1",null,n.pageContext.frontmatter.title),Object(a.b)("p",null,"In this step, we will create a simple todo app (React) and integrate it with Auth0."),Object(a.b)("h3",null,Object(a.b)("a",{name:"Create React App"}),"Create React app"),Object(a.b)("p",null,"Let's start by creating a React app using the ",Object(a.b)("inlineCode",{parentName:"p"},"create-react-app")," command."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-bash"}),"npx create-react-app todo-react-app\n")),Object(a.b)("p",null,"To verify navigate to the folder, start the dev server, and visit ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"%5Bhttp://localhost:3000"}),"http://localhost:3000"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-bash"}),"cd todo-react-app\nnpm start\n")),Object(a.b)("p",null,"Refer this step in ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/dgraph-io/graphql-sample-apps/commit/bc235fda6e7557fc9204dd886c67f7eec7bdcadb"}),"GitHub"),"."),Object(a.b)("h3",null,Object(a.b)("a",{name:"Install dependencies"}),"Install dependencies"),Object(a.b)("p",null,"Now, let's install the various dependencies that we will need in the app."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-bash"}),"npm install todomvc-app-css classnames graphql-tag history react-router-dom\n")),Object(a.b)("p",null,"Refer this step in ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/dgraph-io/graphql-sample-apps/commit/fc7ed70fdde368179e9d7310202b1a0952d2c5c1"}),"GitHub"),"."),Object(a.b)("h3",null,Object(a.b)("a",{name:"Setup Apollo Client"}),"Setup Apollo Client"),Object(a.b)("p",null,"Let's start with installing the Apollo dependencies and then create a setup."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-bash"}),"npm install @apollo/react-hooks apollo-cache-inmemory apollo-client apollo-link-http graphql apollo-link-context\n")),Object(a.b)("p",null,"Now, let's update our ",Object(a.b)("inlineCode",{parentName:"p"},"src/App.js")," with the below content to include the Apollo client setup."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),'import React from "react"\n\nimport ApolloClient from "apollo-client"\nimport { InMemoryCache } from "apollo-cache-inmemory"\nimport { ApolloProvider } from "@apollo/react-hooks"\nimport { createHttpLink } from "apollo-link-http"\n\nimport "./App.css"\n\nconst createApolloClient = () => {\n  const httpLink = createHttpLink({\n    uri: "http://localhost:8080/graphql",\n    options: {\n      reconnect: true,\n    },\n  })\n\n  return new ApolloClient({\n    link: httpLink,\n    cache: new InMemoryCache(),\n  })\n}\n\nconst App = () => {\n  const client = createApolloClient()\n  return (\n    <ApolloProvider client={client}>\n      <div>\n        <h1>todos</h1>\n        <input\n          className="new-todo"\n          placeholder="What needs to be done?"\n          autoFocus={true}\n        />\n      </div>\n    </ApolloProvider>\n  )\n}\n\nexport default App\n')),Object(a.b)("p",null,"Here we have created a simple instance of the Apollo client and passed the URL of our GraphQL API. Then we have passed the client to ",Object(a.b)("inlineCode",{parentName:"p"},"ApolloProvider")," and wrapped our ",Object(a.b)("inlineCode",{parentName:"p"},"App")," so that its accessible throughout the app."),Object(a.b)("p",null,"Refer this step in ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/dgraph-io/graphql-sample-apps/commit/f3fedc663e75d2f8ce933432b15db5d5d080ccc2"}),"GitHub"),"."),Object(a.b)("h3",null,Object(a.b)("a",{name:"Queries and Mutations"}),"Queries and Mutations"),Object(a.b)("p",null,"Now, let's add some queries and mutations."),Object(a.b)("p",null,"First, let's see how we can add a todo and get todos. Create a file ",Object(a.b)("inlineCode",{parentName:"p"},"src/GraphQLData.js")," and add the following."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),'import gql from "graphql-tag";\n\nexport const ADD_TODO = gql`\n  mutation addTask($task: [AddTaskInput!]!) {\n    addTask(input: $task) {\n      task {\n        id\n        title\n      }\n    }\n  }\n`\nexport const GET_TODOS = gql`\n  query {\n    queryTask {\n      id\n      title\n      completed\n    }\n  }\n`\n')),Object(a.b)("p",null,"Refer to the complete set of queries and mutations ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/dgraph-io/graphql-sample-apps/blob/948e9a8626b1f0c1e40de02485a1110b45f53b89/todo-app-react/src/GraphQLData.js"}),"here"),"."),Object(a.b)("p",null,"Now, let's see how to use that to add a todo.\nLet's import the dependencies first in ",Object(a.b)("inlineCode",{parentName:"p"},"src/TodoApp.js")),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),'import { useQuery, useMutation } from "@apollo/react-hooks"\nimport { GET_TODOS, ADD_TODO } from "./GraphQLData"\n')),Object(a.b)("p",null,"Let's now create the functions to add a todo and get todos."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),'const TodoApp = () => {\n\n...\nconst [addTodo] = useMutation(ADD_TODO);\n\nconst { loading, error, data } = useQuery(GET_TODOS);\n  const getData = () => {\n    if (loading) {\n      return null;\n    }\n    if (error) {\n      console.error(`GET_TODOS error: ${error}`);\n      return `Error: ${error.message}`;\n    }\n    if (data.queryTask) {\n      setShownTodos(data.queryTask)\n    }\n  }\n\n ...\n\nconst add = (title) =>\n    addTodo({\n      variables: { task: [\n        { title: title, completed: false, user: { username: "email@example.com" } }\n      ]},\n      refetchQueries: [{\n        query: GET_TODOS\n      }]\n    });\n ...\n\n')),Object(a.b)("p",null,"Refer the complete set of functions ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/dgraph-io/graphql-sample-apps/blob/948e9a8626b1f0c1e40de02485a1110b45f53b89/todo-app-react/src/TodoApp.js"}),"here"),"."),Object(a.b)("p",null,"Also, check the other files updated in this step and make those changes as well."),Object(a.b)("p",null,"Refer this step in ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/dgraph-io/graphql-sample-apps/commit/948e9a8626b1f0c1e40de02485a1110b45f53b89"}),"GitHub"),"."),Object(a.b)("h3",null,Object(a.b)("a",{name:"Auth0 integration"}),"Auth0 integration"),Object(a.b)("p",null,"Now, let's integrate Auth0 in our application and use that to add the logged-in user. Let's first create an app in Auth0."),Object(a.b)("ul",null,Object(a.b)("li",{parentName:"ul"},"Head over to Auth0 and create an account. Click 'sign up' ",Object(a.b)("a",Object.assign({parentName:"li"},{href:"https://auth0.com/"}),"here")),Object(a.b)("li",{parentName:"ul"},'Once the signup is done, click "Create Application" in "Integrate Auth0 into your application".'),Object(a.b)("li",{parentName:"ul"},'Give your app a name and select "Single Page Web App" application type'),Object(a.b)("li",{parentName:"ul"},"Select React as the technology"),Object(a.b)("li",{parentName:"ul"},'No need to do the sample app, scroll down to "Configure Auth0" and select "Application Settings".'),Object(a.b)("li",{parentName:"ul"},"Select your app and add the values of ",Object(a.b)("inlineCode",{parentName:"li"},"domain")," and ",Object(a.b)("inlineCode",{parentName:"li"},"clientid")," in the file ",Object(a.b)("inlineCode",{parentName:"li"},"src/auth_template.json"),". Check this ",Object(a.b)("a",Object.assign({parentName:"li"},{href:"https://auth0.com/docs/quickstart/spa/react/01-login#configure-auth0"}),"link")," for more information."),Object(a.b)("li",{parentName:"ul"},"Add ",Object(a.b)("inlineCode",{parentName:"li"},"http://localhost:3000"),' to "Allowed Callback URLs", "Allowed Web Origins" and "Allowed Logout URLs".')),Object(a.b)("p",null,"Check the commit ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/dgraph-io/graphql-sample-apps/commit/4c9c42e1ae64545cb10a24922623a196288d061c"}),"here")," for verifying the Auth0 setup you did after following the above steps."),Object(a.b)("p",null,"Let's also add definitions for getting a user and adding it to ",Object(a.b)("inlineCode",{parentName:"p"},"src/GraphQLData.js"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),'import gql from "graphql-tag";\n\nexport const GET_USER = gql`\n  query getUser($username: String!) {\n    getUser(username: $username) {\n      username\n      name\n      tasks {\n        id\n        title\n        completed\n      }\n    }\n  }\n`\n\nexport const ADD_USER = gql`\n  mutation addUser($user: AddUserInput!) {\n    addUser(input: [$user]) {\n      user {\n        username\n      }\n    }\n  }\n`\n')),Object(a.b)("p",null,"Check the updated file ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/dgraph-io/graphql-sample-apps/blob/4c9c42e1ae64545cb10a24922623a196288d061c/todo-app-react/src/GraphQLData.js"}),"here")),Object(a.b)("p",null,"Now, let's also add functions for these in ",Object(a.b)("inlineCode",{parentName:"p"},"src/TodoApp.js"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),'...\nimport { GET_USER, GET_TODOS, ADD_USER, ADD_TODO, DELETE_TODO, TOGGLE_TODO, UPDATE_TODO, CLEAR_COMPLETED_TODO, TOGGLE_ALL_TODO } from "./GraphQLData";\nimport { useAuth0 } from "./react-auth0-spa";\n\n...\n\nconst useImperativeQuery = (query) => {\n  const { refetch } = useQuery(query, { skip: true });\n  const imperativelyCallQuery = (variables) => {\n    return refetch(variables);\n  };\n  return imperativelyCallQuery;\n};\n\nconst TodoApp = () => {\n\n  ...\n  const [newTodo, setNewTodo] = useState("");\n  const [shownTodos, setShownTodos] = useState([]);\n\n  const [addUser] = useMutation(ADD_USER);\n\n  ...\n\n  const [updateTodo] = useMutation(UPDATE_TODO);\n  const [clearCompletedTodo] = useMutation(CLEAR_COMPLETED_TODO);   \n  const getUsers = useImperativeQuery(GET_USER)\n\n  const { user } = useAuth0();\n\n  const createUser = () => {\n    if (user === undefined) {\n      return null;\n    }\n    const { data: getUser } = getUsers({\n      username: user.email\n    });\n    if (getUser && getUser.getUser === null) {\n      const newUser = {\n        username: user.email,\n        name: user.nickname,\n      };\n      addUser({\n        variables: {\n          user: newUser\n        }\n      })\n    }\n  }\n}\n\n...\n\n')),Object(a.b)("p",null,"Check all the changes for the file ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/dgraph-io/graphql-sample-apps/blob/4c9c42e1ae64545cb10a24922623a196288d061c/todo-app-react/src/TodoApp.js"}),"here")),Object(a.b)("p",null,"Let's create a short profile page to display user details. Add files ",Object(a.b)("inlineCode",{parentName:"p"},"src/Profile.js")," and ",Object(a.b)("inlineCode",{parentName:"p"},"src/Profile.css"),"."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-javascript"}),'import React from "react";\nimport { useAuth0 } from "./react-auth0-spa";\nimport \'./Profile.css\';\n\nconst Profile = () => {\n  const { loading, user } = useAuth0();\n\n  if (loading || !user) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n      <div className="profile">\n        <img className="profile-img" src={user.picture} alt="Profile" />\n        <p>Name: <strong>{user.nickname}</strong></p>\n        <p>Email: <strong>{user.email}</strong></p>\n      </div>\n  );\n};\n\nexport default Profile;\n')),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-css"}),".profile {\n    padding: 15px;\n}\n.profile-img {\n    display: block;\n    margin: 0 auto;\n    border-radius: 50%;\n}\n")),Object(a.b)("p",null,"Also, check the other files updated in this step and make those changes as well."),Object(a.b)("p",null,"Refer this step in ",Object(a.b)("a",Object.assign({parentName:"p"},{href:"https://github.com/dgraph-io/graphql-sample-apps/commit/4c9c42e1ae64545cb10a24922623a196288d061c"}),"GitHub"),"."),Object(a.b)("p",null,"Let's now start the app."),Object(a.b)("pre",null,Object(a.b)("code",Object.assign({parentName:"pre"},{className:"language-bash"}),"npm start\n")),Object(a.b)("p",null,"Now you should have an app running!"))}l.isMDXComponent=!0}}]);
//# sourceMappingURL=component---src-pages-tutorials-todo-app-tutorial-todo-ui-mdx-dfffae87a0351aee5a21.js.map
{"version":3,"sources":["webpack:///./src/pages/api.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","pageContext","frontmatter","title","parentName","isMDXComponent"],"mappings":"2OAMaA,EAAe,GAOtBC,EAAc,CAClBD,gBAEIE,EAAYC,IACH,SAASC,EAAT,GAGZ,IAFDC,EAEC,EAFDA,WACGC,EACF,8BACD,OAAO,YAACJ,EAAD,iBAAeD,EAAiBK,EAAhC,CAAuCD,WAAYA,EAAYE,QAAQ,cAG5E,sBAAKD,EAAME,YAAYC,YAAYC,OACnC,qDACA,sCAAqB,+BAAGC,WAAW,KAAQ,CACvC,KAAQ,qDADS,2BAArB,iDAI4B,0BAAYA,WAAW,KAAvB,iCAJ5B,6CAMA,gHACA,uBAAK,kCAAMA,WAAW,OAAU,CAC5B,UAAa,kBADZ,+FAQL,sHACA,uBAAK,kCAAMA,WAAW,OAAU,IAA3B,8EAEL,4CAA2B,0BAAYA,WAAW,KAAvB,SAA3B,iBAA8F,0BAAYA,WAAW,KAAvB,aAA9F,kFAAsO,0BAAYA,WAAW,KAAvB,kCAAtO,YAA6T,0BAAYA,WAAW,KAAvB,iBAA7T,6GACA,8FAA6E,0BAAYA,WAAW,KAAvB,oBAA7E,OAAiJ,0BAAYA,WAAW,KAAvB,QAAjJ,8BAAgO,0BAAYA,WAAW,KAAvB,mBAAhO,OAAmS,0BAAYA,WAAW,KAAvB,QAAnS,sCACA,iJACA,iRAKJP,EAAWQ,gBAAiB","file":"component---src-pages-api-mdx-1fdaf448b7b6c81750a5.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/debabrata/Sites/Projects/Dgraph/graphql-dgraph-web/src/components/layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{props.pageContext.frontmatter.title}</h1>\n    <p>{`How to use the GraphQL API. `}</p>\n    <p>{`Dgraph serves `}<a parentName=\"p\" {...{\n        \"href\": \"https://graphql.github.io/graphql-spec/June2018/\"\n      }}>{`spec compliant\nGraphQL`}</a>{` over HTTP. By\ndefault, GraphQL is served at `}<inlineCode parentName=\"p\">{`http://localhost:8080/graphql`}</inlineCode>{`. Both GET and POST\nrequests are served.`}</p>\n    <p>{`For POST requests, the body must be \"application/json\" encoded with the following form.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-json\"\n      }}>{`{\n  \"query\": \"...\",\n  \"operationName\": \"...\",\n  \"variables\": { \"var\": \"val\", ... }\n}\n`}</code></pre>\n    <p>{`For GET requests, the query, variables and operation are sent as query parameters in the url.`}</p>\n    <pre><code parentName=\"pre\" {...{}}>{`http://localhost:8080/graphql?query={...}&variables={...}&operation=...\n`}</code></pre>\n    <p>{`In both cases, only `}<inlineCode parentName=\"p\">{`query`}</inlineCode>{` is required. `}<inlineCode parentName=\"p\">{`variables`}</inlineCode>{` is only required if the query contains GraphQL variables: i.e. it starts like `}<inlineCode parentName=\"p\">{`query myQuery($var: String...)`}</inlineCode>{`. While, `}<inlineCode parentName=\"p\">{`operationName`}</inlineCode>{` is required if there are multiple operations in the query; in which case, operations must also be named.`}</p>\n    <p>{`Compressed requests and responses are available with gzip. Set header `}<inlineCode parentName=\"p\">{`Content-Encoding`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`gzip`}</inlineCode>{` to post encoded data, and `}<inlineCode parentName=\"p\">{`Accept-Encoding`}</inlineCode>{` to `}<inlineCode parentName=\"p\">{`gzip`}</inlineCode>{` to receive a compressed response.`}</p>\n    <p>{`When an operation contains multiple queries, they are run concurrently and independently in a single Dgraph transaction.`}</p>\n    <p>{`When an operation contains multiple mutations, they are run serially, in the order listed in the request, and in a transaction per mutation. If a mutation fails, the following mutations are not executed, and previous mutations are not rolled back.`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}
{"version":3,"sources":["webpack:///./src/pages/tutorials/todo-app-tutorial/todo-UI.mdx"],"names":["_frontmatter","layoutProps","MDXLayout","DefaultLayout","MDXContent","components","props","mdxType","pageContext","frontmatter","title","name","parentName","isMDXComponent"],"mappings":"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","file":"component---src-pages-tutorials-todo-app-tutorial-todo-ui-mdx-dfffae87a0351aee5a21.js","sourcesContent":["import * as React from 'react'\n  /* @jsx mdx */\nimport { mdx } from '@mdx-js/react';\n/* @jsx mdx */\n\nimport DefaultLayout from \"/Users/debabrata/Sites/Projects/Dgraph/graphql-dgraph-web/src/components/layout.js\";\nexport const _frontmatter = {};\n\nconst makeShortcode = name => function MDXDefaultShortcode(props) {\n  console.warn(\"Component \" + name + \" was not imported, exported, or provided by MDXProvider as global scope\");\n  return <div {...props} />;\n};\n\nconst layoutProps = {\n  _frontmatter\n};\nconst MDXLayout = DefaultLayout;\nexport default function MDXContent({\n  components,\n  ...props\n}) {\n  return <MDXLayout {...layoutProps} {...props} components={components} mdxType=\"MDXLayout\">\n\n\n    <h1>{props.pageContext.frontmatter.title}</h1>\n    <p>{`In this step, we will create a simple todo app (React) and integrate it with Auth0.`}</p>\n    <h3><a name=\"Create React App\"></a>{`Create React app`}</h3>\n    <p>{`Let's start by creating a React app using the `}<inlineCode parentName=\"p\">{`create-react-app`}</inlineCode>{` command.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npx create-react-app todo-react-app\n`}</code></pre>\n    <p>{`To verify navigate to the folder, start the dev server, and visit `}<a parentName=\"p\" {...{\n        \"href\": \"%5Bhttp://localhost:3000\"\n      }}>{`http://localhost:3000`}</a>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`cd todo-react-app\nnpm start\n`}</code></pre>\n    <p>{`Refer this step in `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/dgraph-io/graphql-sample-apps/commit/bc235fda6e7557fc9204dd886c67f7eec7bdcadb\"\n      }}>{`GitHub`}</a>{`.`}</p>\n    <h3><a name=\"Install dependencies\"></a>{`Install dependencies`}</h3>\n    <p>{`Now, let's install the various dependencies that we will need in the app.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install todomvc-app-css classnames graphql-tag history react-router-dom\n`}</code></pre>\n    <p>{`Refer this step in `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/dgraph-io/graphql-sample-apps/commit/fc7ed70fdde368179e9d7310202b1a0952d2c5c1\"\n      }}>{`GitHub`}</a>{`.`}</p>\n    <h3><a name=\"Setup Apollo Client\"></a>{`Setup Apollo Client`}</h3>\n    <p>{`Let's start with installing the Apollo dependencies and then create a setup.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm install @apollo/react-hooks apollo-cache-inmemory apollo-client apollo-link-http graphql apollo-link-context\n`}</code></pre>\n    <p>{`Now, let's update our `}<inlineCode parentName=\"p\">{`src/App.js`}</inlineCode>{` with the below content to include the Apollo client setup.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React from \"react\"\n\nimport ApolloClient from \"apollo-client\"\nimport { InMemoryCache } from \"apollo-cache-inmemory\"\nimport { ApolloProvider } from \"@apollo/react-hooks\"\nimport { createHttpLink } from \"apollo-link-http\"\n\nimport \"./App.css\"\n\nconst createApolloClient = () => {\n  const httpLink = createHttpLink({\n    uri: \"http://localhost:8080/graphql\",\n    options: {\n      reconnect: true,\n    },\n  })\n\n  return new ApolloClient({\n    link: httpLink,\n    cache: new InMemoryCache(),\n  })\n}\n\nconst App = () => {\n  const client = createApolloClient()\n  return (\n    <ApolloProvider client={client}>\n      <div>\n        <h1>todos</h1>\n        <input\n          className=\"new-todo\"\n          placeholder=\"What needs to be done?\"\n          autoFocus={true}\n        />\n      </div>\n    </ApolloProvider>\n  )\n}\n\nexport default App\n`}</code></pre>\n    <p>{`Here we have created a simple instance of the Apollo client and passed the URL of our GraphQL API. Then we have passed the client to `}<inlineCode parentName=\"p\">{`ApolloProvider`}</inlineCode>{` and wrapped our `}<inlineCode parentName=\"p\">{`App`}</inlineCode>{` so that its accessible throughout the app.`}</p>\n    <p>{`Refer this step in `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/dgraph-io/graphql-sample-apps/commit/f3fedc663e75d2f8ce933432b15db5d5d080ccc2\"\n      }}>{`GitHub`}</a>{`.`}</p>\n    <h3><a name=\"Queries and Mutations\"></a>{`Queries and Mutations`}</h3>\n    <p>{`Now, let's add some queries and mutations.`}</p>\n    <p>{`First, let's see how we can add a todo and get todos. Create a file `}<inlineCode parentName=\"p\">{`src/GraphQLData.js`}</inlineCode>{` and add the following.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import gql from \"graphql-tag\";\n\nexport const ADD_TODO = gql\\`\n  mutation addTask($task: [AddTaskInput!]!) {\n    addTask(input: $task) {\n      task {\n        id\n        title\n      }\n    }\n  }\n\\`\nexport const GET_TODOS = gql\\`\n  query {\n    queryTask {\n      id\n      title\n      completed\n    }\n  }\n\\`\n`}</code></pre>\n    <p>{`Refer to the complete set of queries and mutations `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/dgraph-io/graphql-sample-apps/blob/948e9a8626b1f0c1e40de02485a1110b45f53b89/todo-app-react/src/GraphQLData.js\"\n      }}>{`here`}</a>{`.`}</p>\n    <p>{`Now, let's see how to use that to add a todo.\nLet's import the dependencies first in `}<inlineCode parentName=\"p\">{`src/TodoApp.js`}</inlineCode></p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import { useQuery, useMutation } from \"@apollo/react-hooks\"\nimport { GET_TODOS, ADD_TODO } from \"./GraphQLData\"\n`}</code></pre>\n    <p>{`Let's now create the functions to add a todo and get todos.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`const TodoApp = () => {\n\n...\nconst [addTodo] = useMutation(ADD_TODO);\n\nconst { loading, error, data } = useQuery(GET_TODOS);\n  const getData = () => {\n    if (loading) {\n      return null;\n    }\n    if (error) {\n      console.error(\\`GET_TODOS error: \\${error}\\`);\n      return \\`Error: \\${error.message}\\`;\n    }\n    if (data.queryTask) {\n      setShownTodos(data.queryTask)\n    }\n  }\n\n ...\n\nconst add = (title) =>\n    addTodo({\n      variables: { task: [\n        { title: title, completed: false, user: { username: \"email@example.com\" } }\n      ]},\n      refetchQueries: [{\n        query: GET_TODOS\n      }]\n    });\n ...\n\n`}</code></pre>\n    <p>{`Refer the complete set of functions `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/dgraph-io/graphql-sample-apps/blob/948e9a8626b1f0c1e40de02485a1110b45f53b89/todo-app-react/src/TodoApp.js\"\n      }}>{`here`}</a>{`.`}</p>\n    <p>{`Also, check the other files updated in this step and make those changes as well.`}</p>\n    <p>{`Refer this step in `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/dgraph-io/graphql-sample-apps/commit/948e9a8626b1f0c1e40de02485a1110b45f53b89\"\n      }}>{`GitHub`}</a>{`.`}</p>\n    <h3><a name=\"Auth0 integration\"></a>{`Auth0 integration`}</h3>\n    <p>{`Now, let's integrate Auth0 in our application and use that to add the logged-in user. Let's first create an app in Auth0.`}</p>\n    <ul>\n      <li parentName=\"ul\">{`Head over to Auth0 and create an account. Click 'sign up' `}<a parentName=\"li\" {...{\n          \"href\": \"https://auth0.com/\"\n        }}>{`here`}</a></li>\n      <li parentName=\"ul\">{`Once the signup is done, click \"Create Application\" in \"Integrate Auth0 into your application\".`}</li>\n      <li parentName=\"ul\">{`Give your app a name and select \"Single Page Web App\" application type`}</li>\n      <li parentName=\"ul\">{`Select React as the technology`}</li>\n      <li parentName=\"ul\">{`No need to do the sample app, scroll down to \"Configure Auth0\" and select \"Application Settings\".`}</li>\n      <li parentName=\"ul\">{`Select your app and add the values of `}<inlineCode parentName=\"li\">{`domain`}</inlineCode>{` and `}<inlineCode parentName=\"li\">{`clientid`}</inlineCode>{` in the file `}<inlineCode parentName=\"li\">{`src/auth_template.json`}</inlineCode>{`. Check this `}<a parentName=\"li\" {...{\n          \"href\": \"https://auth0.com/docs/quickstart/spa/react/01-login#configure-auth0\"\n        }}>{`link`}</a>{` for more information.`}</li>\n      <li parentName=\"ul\">{`Add `}<inlineCode parentName=\"li\">{`http://localhost:3000`}</inlineCode>{` to \"Allowed Callback URLs\", \"Allowed Web Origins\" and \"Allowed Logout URLs\".`}</li>\n    </ul>\n    <p>{`Check the commit `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/dgraph-io/graphql-sample-apps/commit/4c9c42e1ae64545cb10a24922623a196288d061c\"\n      }}>{`here`}</a>{` for verifying the Auth0 setup you did after following the above steps.`}</p>\n    <p>{`Let's also add definitions for getting a user and adding it to `}<inlineCode parentName=\"p\">{`src/GraphQLData.js`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import gql from \"graphql-tag\";\n\nexport const GET_USER = gql\\`\n  query getUser($username: String!) {\n    getUser(username: $username) {\n      username\n      name\n      tasks {\n        id\n        title\n        completed\n      }\n    }\n  }\n\\`\n\nexport const ADD_USER = gql\\`\n  mutation addUser($user: AddUserInput!) {\n    addUser(input: [$user]) {\n      user {\n        username\n      }\n    }\n  }\n\\`\n`}</code></pre>\n    <p>{`Check the updated file `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/dgraph-io/graphql-sample-apps/blob/4c9c42e1ae64545cb10a24922623a196288d061c/todo-app-react/src/GraphQLData.js\"\n      }}>{`here`}</a></p>\n    <p>{`Now, let's also add functions for these in `}<inlineCode parentName=\"p\">{`src/TodoApp.js`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`...\nimport { GET_USER, GET_TODOS, ADD_USER, ADD_TODO, DELETE_TODO, TOGGLE_TODO, UPDATE_TODO, CLEAR_COMPLETED_TODO, TOGGLE_ALL_TODO } from \"./GraphQLData\";\nimport { useAuth0 } from \"./react-auth0-spa\";\n\n...\n\nconst useImperativeQuery = (query) => {\n  const { refetch } = useQuery(query, { skip: true });\n  const imperativelyCallQuery = (variables) => {\n    return refetch(variables);\n  };\n  return imperativelyCallQuery;\n};\n\nconst TodoApp = () => {\n\n  ...\n  const [newTodo, setNewTodo] = useState(\"\");\n  const [shownTodos, setShownTodos] = useState([]);\n\n  const [addUser] = useMutation(ADD_USER);\n\n  ...\n\n  const [updateTodo] = useMutation(UPDATE_TODO);\n  const [clearCompletedTodo] = useMutation(CLEAR_COMPLETED_TODO);   \n  const getUsers = useImperativeQuery(GET_USER)\n\n  const { user } = useAuth0();\n\n  const createUser = () => {\n    if (user === undefined) {\n      return null;\n    }\n    const { data: getUser } = getUsers({\n      username: user.email\n    });\n    if (getUser && getUser.getUser === null) {\n      const newUser = {\n        username: user.email,\n        name: user.nickname,\n      };\n      addUser({\n        variables: {\n          user: newUser\n        }\n      })\n    }\n  }\n}\n\n...\n\n`}</code></pre>\n    <p>{`Check all the changes for the file `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/dgraph-io/graphql-sample-apps/blob/4c9c42e1ae64545cb10a24922623a196288d061c/todo-app-react/src/TodoApp.js\"\n      }}>{`here`}</a></p>\n    <p>{`Let's create a short profile page to display user details. Add files `}<inlineCode parentName=\"p\">{`src/Profile.js`}</inlineCode>{` and `}<inlineCode parentName=\"p\">{`src/Profile.css`}</inlineCode>{`.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-javascript\"\n      }}>{`import React from \"react\";\nimport { useAuth0 } from \"./react-auth0-spa\";\nimport './Profile.css';\n\nconst Profile = () => {\n  const { loading, user } = useAuth0();\n\n  if (loading || !user) {\n    return <div>Loading...</div>;\n  }\n\n  return (\n      <div className=\"profile\">\n        <img className=\"profile-img\" src={user.picture} alt=\"Profile\" />\n        <p>Name: <strong>{user.nickname}</strong></p>\n        <p>Email: <strong>{user.email}</strong></p>\n      </div>\n  );\n};\n\nexport default Profile;\n`}</code></pre>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-css\"\n      }}>{`.profile {\n    padding: 15px;\n}\n.profile-img {\n    display: block;\n    margin: 0 auto;\n    border-radius: 50%;\n}\n`}</code></pre>\n    <p>{`Also, check the other files updated in this step and make those changes as well.`}</p>\n    <p>{`Refer this step in `}<a parentName=\"p\" {...{\n        \"href\": \"https://github.com/dgraph-io/graphql-sample-apps/commit/4c9c42e1ae64545cb10a24922623a196288d061c\"\n      }}>{`GitHub`}</a>{`.`}</p>\n    <p>{`Let's now start the app.`}</p>\n    <pre><code parentName=\"pre\" {...{\n        \"className\": \"language-bash\"\n      }}>{`npm start\n`}</code></pre>\n    <p>{`Now you should have an app running!`}</p>\n\n    </MDXLayout>;\n}\n;\nMDXContent.isMDXComponent = true;\n      "],"sourceRoot":""}